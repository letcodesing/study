test_set['day'] = test_set['day'].astype(np.float64)

plt.plot(hist.history['loss'],marker='.',c='red',label='loss') #순차적으로 출력이므로  y값 지정 필요 x?

import matplotlib
matplotlib.rcParams['font.family']='Malgun Gothic'
matplotlib.rcParams['axes.unicode_minus']=False

cols = ['IsHoliday']
for col in cols:
    le = LabelEncoder()
    train_set[col]=le.fit_transform(train_set[col])
    test_set[col]=le.fit_transform(test_set[col])
    

train_set['Date'] = pd.to_datetime(train_set['Date'])
train_set['year'] = train_set['Date'].dt.strftime('%Y')

train_set['year'] = [t.year for t in pd.DatetimeIndex(train_set.Date)]
train_set['year'] = train_set['year'].map({2010:0, 2011:1, 2012:2})

train_set['IsHoliday'] = train_set['IsHoliday'].astype(int)
test_set['IsHoliday'] = test_set['IsHoliday'].astype(int)

df = pd.concat([train_set, test_set])
print(df)

alldata = pd.get_dummies(df, columns=['day','Store','month', 'year', 'IsHoliday'])
print(alldata)

train_set2 = alldata[:len(train_set)]
test_set2 = alldata[len(train_set):]

dense1 = Dense(200)(input1)
batchnorm1 = BatchNormalization()(dense1)
activ1 = Activation('relu')(batchnorm1)
drp4 = Dropout(0.2)(activ1)

train_set['Promotion1'] = train_set['Promotion1'].fillna(train_set['Promotion1'].mode()[0])

def get_month(date):
    month = date[3:5]
    month = int(month)
    return month

# 이 함수를 Date 칼럼에 적용한 Month 칼럼을 만들어줍니다.
train_set['Month'] = train_set['Date'].apply(get_month)
test_set['Month'] = test_set['Date'].apply(get_month)

# 결과를 확인합니다.
print(train_set)

# Date의 object 데이터를 int64 데이터로 변환 및 결측치 제거
cat_col = train_set.dtypes[train_set.dtypes == 'object'].index   
for col in cat_col:
    train_set[col] = train_set[col].fillna('None')
    train_set[col] = LabelEncoder().fit_transform(train_set[col].values)
print(train_set.head(5))     # ==> 2줄까지 출력하여 확인  
  
cat_col = test_set.dtypes[test_set.dtypes == 'object'].index   
for col in cat_col:
    test_set[col] = test_set[col].fillna('None')
    test_set[col] = LabelEncoder().fit_transform(test_set[col].values)
       
train_set['IsHoliday'] = train_set['IsHoliday'].fillna(train_set.IsHoliday.dropna().mode()[0])
train_set['IsHoliday'] = train_set['IsHoliday'].apply(np.round).astype('float64')
test_set['IsHoliday'] = test_set['IsHoliday'].fillna(train_set.IsHoliday.dropna().mode()[0])
test_set['IsHoliday'] = test_set['IsHoliday'].apply(np.round).astype('float64')

submission = pd.read_csv(path + 'submission.csv')
submission['Weekly_Sales'] = y_summit

# Brutal approach to deal with predictions close to outer range 
q1 = submission['Weekly_Sales'].quantile(0.0045)
q2 = submission['Weekly_Sales'].quantile(0.99)

submission['Weekly_Sales'] = submission['Weekly_Sales'].apply(lambda x: x if x > q1 else x*0.77)
submission['Weekly_Sales'] = submission['Weekly_Sales'].apply(lambda x: x if x < q2 else x*1.1)

# 필요없는 컬럼 제거하기 
train_set = train_set.drop(columns=['Date','IsHoliday'])
test_set = test_set.drop(columns=['Date','IsHoliday'])


save_filepath = './_ModelCheckPoint/' + current_name + '/'
load_filepath = './_ModelCheckPoint/' + current_name + '/'

def holiday_to_number(isholiday):
    if isholiday == True:
        number = 1
    else:
        number = 0
    return number

train_set['NumberHoliday'] = train_set['IsHoliday'].apply(holiday_to_number)
test_set['NumberHoliday'] = test_set['IsHoliday'].apply(holiday_to_number)